.........................................................................................................................................................................................................................................
							  Express.js - Web /Api Framework For node.js
.......................................................................................................................................................................................................................................
What is express?
   Express Fast, unopinionated, minimalist web framework for Node.js
express is built on top of http core module.

What apps can be built using express?

1.RESTFull WebServices

2.Dynamic content generation apps -  spring mvc, .netmvc.   with ui


Core features of Express:
1.Abstraction on core http module
2.lot of apis to send data like json api
3.routers : to create HTTP based web services and apps quickly.
4.middlewares : to extend core framework like - logging, database, security, templates...

Types of distributed Apps:

1.Monolithic App
2.Microservices

Can Express be used to build Microservices?
 No,
Express is just monolithic App framework
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Express Key concepts: in express every thing object
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
Objects in express

1.Application
  We call Container object which contain other objects
  entry and exit of an application
  application is created by calling function
2.Request
3.Response
4.Router


1.Application object roll:
	-Routing HTTP requests
	-Configuring middleware
	-Rendering HTML views
	-Registering a template engine


Express Project setup:

1.You can install express dependencies in existing plain node project
2.You can use express cli , to create project structures

Steps:

1.create project folder
2.create src folder
3.npm init
4.install express dependency
5.start writing code

mkdir express-app
cd express-app
npm init
...........................

Installing express framework:
.............................

npm i express --save
npm i nodemon --save-dev

  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "dev": "nodemon src/app.js"
  },
.....................................................................................
				Express- Coding
.....................................................................................

Express : HelloWorld

File Name : app.js - conventional name but you can save index.js as well.

//import express function
const express = require('express')
// console.log(express)

//creating application object
const app = express()

// console.log(app)

//api:
app.get('/hello', (req, res) => {
    //send response
    res.end('Hello Express')
})


//start the server

app.listen(3000, () => {
    console.log('Express Server is Ready!')
})
.................................................................................
			HTTP verbs and CURD
....................................................................................

HTTP Verbs         Operation Type

GET                Read

POST               Write

PUT                Update

DELETE          Remove

URL Pattern:
///////////
Every Http Verbs are mapped against url

/api/customers        -GET ,POST,PUT,DELETE
/api/products
/api/reviews
 
const express = require('express')

const PORT = 3000
const app = express()

//expose apis
//get ===HTTP GET Verb
app.get('/', (req, res) => {
    res.end('Hello Express')
})

//Resource:USERs
app.get('/api/users', (req, res) => {
    res.end('USERS GET')
})
app.post('/api/users', (req, res) => {
    res.end('USERS POST')
})
app.put('/api/users', (req, res) => {
    res.end('USERS PUT')
})
app.delete('/api/users', (req, res) => {
    res.end('USERS DELETE')
})

//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
.........................................................................................................................................................................................................................................
									PORT, getting Server Info
.......................................................................................................................................................................................................................................

const express = require('express')

const PORT = 3000

const app = express()

//expose apis
//get ===HTTP GET Verb
app.get('/', (req, res) => {
    res.end('Hello Express')
})

//Resource:USERs
app.get('/api/users', (req, res) => {
    res.end('USERS GET')
})
app.post('/api/users', (req, res) => {
    res.end('USERS POST')
})
app.put('/api/users', (req, res) => {
    res.end('USERS PUT')
})
app.delete('/api/users', (req, res) => {
    res.end('USERS DELETE')
})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is Running at ${server.address().port}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										JSON - payload
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
const express = require('express')
const USERS = require('./mock-data/users')

const PORT = 3000

const app = express()

//expose apis
//get ===HTTP GET Verb
app.get('/', (req, res) => {
    res.end('Hello Express')
})

//Resource:USERs
app.get('/api/users', (req, res) => {
    res.json(USERS)
})
app.post('/api/users', (req, res) => {
    res.end('USERS POST')
})
app.put('/api/users', (req, res) => {
    res.end('USERS PUT')
})
app.delete('/api/users', (req, res) => {
    res.end('USERS DELETE')
})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is Running at ${server.address().port}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Service layer, controller, promise
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
const express = require('express')
const { findAll } = require('./services/user.service')

const PORT = 3000
const app = express()

//expose apis
//get ===HTTP GET Verb
app.get('/', (req, res) => {
    res.end('Hello Express')
})

//Resource:USERs
app.get('/api/users', async (req, res) => {
    try {
        const users = await findAll()
        res.json(users)
    }
    catch (err) {
        console.log(err)
    }
})
app.post('/api/users', (req, res) => {
    res.end('USERS POST')
})
app.put('/api/users', (req, res) => {
    res.end('USERS PUT')
})
app.delete('/api/users', (req, res) => {
    res.end('USERS DELETE')
})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is Running at ${server.address().port}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Routers
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

src/routers/user.router.js
const express = require('express')
const { findAll } = require('../services/user.service')

const userRouter = express.Router()

userRouter.get('/', async (req, res) => {
    try {
        const users = await findAll()
        res.json(users)
    }
    catch (err) {
        console.log(err)
    }
})


module.exports = userRouter;


src/routers/post.router.js
const express = require('express')

const postRouter = express.Router()

postRouter.get('/', async (req, res) => {
    try {
        res.json({message:'Post Router'})
    }
    catch (err) {
        console.log(err)
    }
})


module.exports = postRouter;

src/routers/comments.router.js
const express = require('express')

const commentsRouter = express.Router()

commentsRouter.get('/', async (req, res) => {
    try {
        res.json({message:'Comments Router'})
    }
    catch (err) {
        console.log(err)
    }
})


module.exports = commentsRouter;

src/app.js
const express = require('express')
//const userRouter = require('./routers/user.router')
const PORT = 3000
const app = express()

//bind Routers with application object, so that application can redirect to routers
// app.use('/api/users',userRouter)
app.use('/api/users', require('./routers/user.router'))
app.use('/api/posts', require('./routers/post.router'))
app.use('/api/comments', require('./routers/comments.router'))

//expose apis
//get ===HTTP GET Verb
app.get('/', (req, res) => {
    res.end('Hello Express')
})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is Running at ${server.address().port}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										  Express middlewares
.......................................................................................................................................................................................................................................
What is Middleware?
       Middleware is JavaScript function that have access request object and response and next function in the application request response              cycle.
 The difference between normal function which handles req and response with express , middleware takes third arg

normal function
 app.get('url',(req,res)=>{})

Middleware function
  app.get('url',(req,res,next)=>{
       //pre and post processing
  })
 req and res are objects
 next is a function

The "next" function is a function in the express router which,when invoked,executes the middleware succeeding the current middleware.


Tasks are middleware is doing:

1.Execute any code
2.Make changes to request and response object before handling real req and res cycle.
3.Middlwares can be attached on application object and also router object

use Method
  use method is used to registry middleware.

app.use
router.use

app.use('/api/users', require('./routers/users/user.router'))
 In this code we have registered already middleware which is called as "routerMidleware" - Router itself is middleware.

How to write our own middleware? - Custom Middleware.
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Use case: Simple Middleware
const express = require('express')
const PORT = 3000
const app = express()

//middlewares
app.use(function (req, res, next) {
    console.log('Middleware')
    //chain the middleware: move to next
    next()
})


app.get('/', (req, res) => {
    res.end('Hello Express')
})


//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Use case :Multiple Middlewares
const express = require('express')
const PORT = 3000
const app = express()

//middlewares
app.use(function (req, res, next) {
    console.log('M1')
    //chain the middleware: move to next
    next()
})
app.use(function (req, res, next) {
    console.log('M2')
    //chain the middleware: move to next
    next()
})
app.use(function (req, res, next) {
    console.log('M3')
    //chain the middleware: move to next
    next()
})


app.get('/', (req, res) => {
    res.end('Hello Express')
})


//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Use case : Add some custom Header
const express = require('express')
const PORT = 3000
const app = express()

//middlewares
app.use(function (req, res, next) {
    //custom header
    res.set("message", "Hello")
    //chain the middleware: move to next
    next()
})
app.use(function (req, res, next) {
    res.set("name", "Subramanian")

    console.log('M2')
    //chain the middleware: move to next
    next()
})
app.use(function (req, res, next) {
    res.set("company", "IBM")

    console.log('M3')
    //chain the middleware: move to next
    next()
})


app.get('/', (req, res) => {
    res.end('Hello Express')
})


//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
*********************************************************************************************************************************************************
											Middleware for specific URL
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
const express = require('express')
const PORT = 3000
const app = express()

//url specific middleware
app.use('/api/hello', (req, res, next) => {
    res.set('hello', 'helloapi')
    next()
})

app.get('/', (req, res) => {
    res.end('Hello Express')
})

app.get('/api/hello', (req, res) => {
    res.end('Hello-GET')
})
app.post('/api/hello', (req, res) => {
    res.end('Hello-POST')
})
app.put('/api/hello', (req, res) => {
    res.end('Hello-Put')
})
app.delete('/api/hello', (req, res) => {
    res.end('Hello-Delete')
})

app.get('/api/hai', (req, res) => {
    res.end('hai-GET')
})
//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
							        URL and specific method
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
const express = require('express')
const PORT = 3000
const app = express()

//url specific middleware
app.get('/api/hello', (req, res, next) => {
    res.set('hello', 'this is get method')
    next()
})

app.get('/', (req, res) => {
    res.end('Hello Express')
})

app.get('/api/hello', (req, res) => {
    res.end('Hello-GET')
})
app.post('/api/hello', (req, res) => {
    res.end('Hello-POST')
})
app.put('/api/hello', (req, res) => {
    res.end('Hello-Put')
})
app.delete('/api/hello', (req, res) => {
    res.end('Hello-Delete')
})

app.get('/api/hai', (req, res) => {
    res.end('hai-GET')
})
//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
								   Routers and middlewares
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
const express = require('express')
const PORT = 3000
const app = express()
//router
const userRouter = express.Router()
app.use('/api/users', userRouter)

//userRouter
// userRouter.use(function (req, res, next) {
//     console.log('User Router')
//     res.set('user', 'this is user Router')
//     next()
// })
// userRouter.use('/', function (req, res, next) {
//     console.log('User Router')
//     res.set('user', 'this is user Router')
//     next()
// })
userRouter.get('/api/users', function (req, res, next) {
    console.log('User Router')
    res.set('user', 'this is user Router')
    next()
})
userRouter.get('/', (req, res) => {
    res.send('User router')
})
userRouter.get('/:id', (req, res) => {
    res.send('User router details')
})


//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
.........................................................................................................................................................................................................................................
		 				 	Can we pass parameters to the Middleware so that we can 
		     					configure middleware - Configurable Middlewares
.......................................................................................................................................................................................................................................

Middleware which takes parameter , it should be higher order function. - function should return another function.

inner function is middleware.

Syntax: without explicit parameter

app.use(function(req,res,next)=>{})

Syntax: with explicit paramter

const mymiddleware = function(param) {

  return function(req,res,next){
     //access param

    next()
  }
}
app.use(mymiddleware('param'))

const express = require('express')
const PORT = 3000
const app = express()

//parametermized middleware
const middleware = function (param) {
    return function (req, res, next) {
        //middleware logic
        console.log(param)
        next()
    }
}
app.use(middleware('hello'))

app.get('/', (req, res) => {
    res.send('Home')
})

//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Use case:
I want to log every request into a file- building logger using middleware

const express = require('express')
const PORT = 3000
const app = express()
const fs = require('node:fs')
const path = require('node:path')

function fileLoggerMiddleware(req, res, next) {
    const logFormat = `[${new Date().toISOString()}] - ${req.method} - ${req.url}\n`
    fs.appendFileSync(path.join(__dirname, 'access.log'), logFormat)
    next()
}
app.use(fileLoggerMiddleware)

app.get('/', (req, res) => {
    res.send('Home')
})
app.get('/api/hello', (req, res) => {
    res.send('Hello')
})
app.get('/api/users', (req, res) => {
    res.send('Users')
})
app.post('/api/products', (req, res) => {
    res.send('products')
})
//start server
app.listen(PORT, () => {
    console.log(`Express server is Running at ${PORT}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									Types of Middlewares
...........................................................................................................................................................................................................................................
1.Application middleware
2.Router level middleware
3.Error handling middleware
4.Third party middleware

1.Application middleware:
  Middleware is attached on application object

2.Router level middleware
->writing router:
 In express except ,request and response , all features including router is middleware.
 Router is in built middleware.


								Error Handling Middleware

const express = require('express')
const app = express()

const PORT = 3000

app.get('/api/user/:name', (req, res) => {
    const name = req.params.name
    if (name === 'admin') {
        res.send({ message: 'Welcome to Admin' })
    } else {
        throw new Error('User Is not valid')
    }
})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is ready! at ${server.address().port}`)
})
//server properties

In the above code, the exception is thrown when user is not valid, we have to convert into meaningful  response

Error Handling middleware

What is Error Handling Middleware in Express?

In Express.js, an error-handling middleware is a special middleware function that handles errors across your app.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										 Third party Middlewares

Built in middleware or third party middlewares
Middlewares are supplied as part of the express team, open source community.

Common Middlewares From Express Team:

body-parser		Parse HTTP request body.
compression		Compress HTTP responses.
connect-rid		Generate unique request ID.
cookie-parser		Parse cookie header and populate req.cookies. See also cookies.
cookie-session	Establish cookie-based sessions.
cors				Enable cross-origin resource sharing (CORS) with various options.
errorhandler		Development error-handling/debugging.
method-override	Override HTTP methods using header.
morgan			HTTP request logger.
multer			Handle multi-part form data.
response-time		Record HTTP response time.
serve-favicon		Serve a favicon.
serve-index		Serve directory listing for a given path.
serve-static		Serve static files.
session			Establish server-based sessions (development only).
timeout			Set a timeout perioHTTP request processing.
vhost			Create virtual domains.

Every middleware is available as npm dependency.

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										bodyParser Middleware
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

bodyParser middleware parses incoming payload(json/formdata), converts into "JavaScript Object"

bo;dyParser can parse different types of incoming data

JSON body parser - into js object
Raw body parser - into js object
Text body parser - into js object
URL-encoded form body parser - into js object

Steps:

1.install middleware
npm install body-parser

2.configuration as part of application object
const bodyParser = require('body-parser')
app.use(bodyParser.urlencoded())
// parse application/json
app.use(bodyParser.json())

eg:
const express = require('express')
const userRouter = express.Router()

const users = [{
    id: 1,
    name: 'Erik',
    email: 'erik@gmail.com'
},
{
    id: 2,
    name: 'Subramanian',
    email: 'subu@gmail.com'
}]

//findAll
userRouter.get('/', async (req, res) => {
    try {
        res.json(users)
    }
    catch (err) {
        console.log(err)
    }
})
//findById
userRouter.get('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id)
        const user = users.find(u => u.id === id)
        if (!user) {
            //error resonse
            res.status(404).json({ error: 'User Not Found' })
        }
        //throw new Error('something happened')
        res.status(200).json(user)
    }
    catch (err) {
        console.log(err)
        res.status(404).json({ error: err })
    }
})
//save
userRouter.post('/', async (req, res) => {
    try {
        //read payload
        // const payload = req.body
        const { name, email } = req.body
        // const newUser = { id: users.length + 1, name: name, email: email }
        const newUser = { id: users.length + 1, name, email }
        users.push(newUser)
        res.status(201).json(newUser)
    }
    catch (err) {
        console.log(err)
    }
})
//update : PUT /:id
userRouter.put('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id)
        const { name, email } = req.body
        const user = users.find(u => u.id === id)
        if (!user) {
            res.status(404).json({ error: 'User Not Found' })
        }
        //update
        user.name = name || user.name
        user.email = email || user.email
        res.json(user)
    }
    catch (err) {
        console.log(err)
    }
})

//Delete
userRouter.delete('/:id', async (req, res) => {
    try {
        const id = parseInt(req.params.id)
        const index = users.findIndex(u => u.id === id)
        if (index === -1) {
            res.status(404).json({ error: 'User Not Found' })
        }
        const deletedUser = users.splice(index, 1)[0]
        res.json(deletedUser)
    }
    catch (err) {
        console.log(err)
        res.status(404).json({ error: err })
    }
})

module.exports = userRouter;

const express = require('express')
const bodyParser = require('body-parser')
const PORT = 3000
const app = express()

//register body parser middleware
app.use(bodyParser.json())

app.use('/api/users', require('./routers/user.router'))
app.use('/api/posts', require('./routers/post.router'))
app.use('/api/comments', require('./routers/comments.router'))

app.get('/', (req, res) => {
    res.end('Hello Express')
})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is Running at ${server.address().port}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										CORS - Cross Origin Resource sharing
.........................................................................................................................................................................................................................................


What is CORS?
 Internet browsers usually block access to undefined websites from your services and apis.
 Implementing this module enable your server to share its resources solely with clients who reside in the same domain as yours.

 CORS an HTTP header based mechanism implemented by browsers, enables a server or api to specific any origins

Implementation:
Step 1:
npm install cors

Step 2:
activate cors in app.js via middleware

const cors = require('cors')

app.use(cors()) - enabled for all routes

Enabled for particular route:

app.get('/products/:id', cors(), function (req, res, next) {
  res.json({msg: 'This is CORS-enabled for a Single Route'})
})

Note:
 HTTP methods,get,post,delete,update syntax
 
  app.get('url',requestlistener)

  app.get('url',middleware,requestlistener)

Default CORS Configuration values:
{
  "origin": "*",
  "methods": "GET,HEAD,PUT,PATCH,POST,DELETE",
  "preflightContinue": false,
  "optionsSuccessStatus": 204
}

eg
const express = require('express')
const app = express()
const cors = require('cors')

// const corsOptions = {
//     origin: 'http://www.abce.com'
// }
//allow only from this url.
const corsOptions = {
    origin: 'http://127.0.0.1:5500'
}
app.use(cors(corsOptions))

//allow any body to access this app
// app.use(cors())

app.get('/', (req, res) => {
    res.end('Home Page')
})


app.get('/api/customers/:id', (req, res, next) => {
    res.json({ msg: 'cors enabled for only this particular' })
})

//start server
const server = app.listen(3000, () => {
    console.log(server.address())
    console.log(`Express is running @ ${server.address().port}`)
})


Testing:
create index.html
  run this file in vs code with "live server"

How to install live server?
  live server is extensions that should be installed first.

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    <script>
        async function getCustomer() {
            const res = await fetch('http://localhost:3001/api/customers/1')
            const result = await res.json()
            console.log(result)
        }
        getCustomer()
    </script>
</body>

</html>

right click on this file and try to run , from there you can send request.


In the browser console.
content_script_bundle.js:1 Attempting initialization Mon Jul 15 2024 20:48:41 GMT+0530 (India Standard Time)
index.html:1 Access to fetch at 'http://localhost:3001/api/customers/1' from origin 'http://127.0.0.1:5500' has been blocked by CORS policy: The 'Access-Control-Allow-Origin' header has a value 'http://www.abce.com' that is not equal to the supplied origin. Have the server send the header with a valid value, or, if an opaque response serves your needs, set the request's mode to 'no-cors' to fetch the resource with CORS disabled.Understand this error
index.html:13 
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
										 Logger
.................................................................................................................................................................................................................................

In Express, we have many logger implementation ...

Morgan:
   HTTP request logger middleware for node.js

How to use Morgan

Steps:

npm install morgan

const express = require('express')
const app = express()
const fs = require('node:fs')
const path = require('node:path')
const morgan = require('morgan')

//console log information
// app.use(morgan('dev'))
const accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })

app.use(morgan('combined', { stream: accessLogStream }))

app.get('/api/greet',(req,res)=>{
    res.send('Hello')
})

//start server
const server = app.listen(3000, () => {
    console.log(server.address())
    console.log(`Express is running @ ${server.address().port}`)
})
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
									express.static middleware
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

To serve static files such as HTML,CSS,js,images and fonts can be served using the built-in middleware called express.static

you dont need to install any dependency.

project structure 

express-app
   src
	public
		index.html
     app.js

const express = require('express')
const app = express()
const fs = require('node:fs')
const path = require('node:path')
const morgan = require('morgan')

const accessLogStream = fs.createWriteStream(path.join(__dirname, 'access.log'), { flags: 'a' })
app.use(morgan('combined', { stream: accessLogStream }))
//register to serve static pages : it looks index.html automatically.
app.use(express.static(path.join(__dirname, "public")))


//start server
const server = app.listen(3000, () => {
    console.log(server.address())
    console.log(`Express is running @ ${server.address().port}`)
})

📌 It must have 4 parameters:

(err, req, res, next)

Express knows it's for handling errors because of the 4 parameters.

Rules:
1.It must have 4 parameters - err,req,res,next
2.It must be placed after all routers -
	General middlewares are placed at top of the  routers
	Exception Middlewares are place at bottom of the routers

const express = require('express')
const app = express()
const PORT = 3000

app.get('/api/user/:name', (req, res) => {
    const name = req.params.name
    if (name === 'admin') {
        res.send({ message: 'Welcome to Admin' })
    } else {
        throw new Error('User Is not valid')
    }
})
//Error Handling middleware

app.use((err, req, res, next) => {
    console.error(err.message);
    res.status(500).json({
        success: false,
        message: err.message
    });

})

//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is ready! at ${server.address().port}`)
})
//server properties

Handling 404 - Route not  found:
.......................................................

app.use((req, res) => {
  res.status(404).json({
    success: false,
    message: "Route not found",
  });
});
Put this before the global error middleware.

Full Code:
const express = require('express')
const app = express()

const PORT = 3000



app.get('/api/user/:name', (req, res) => {
    const name = req.params.name
    if (name === 'admin') {
        res.send({ message: 'Welcome to Admin' })
    } else {
        throw new Error('User Is not valid')
    }
})

//404 Route not found error handler
//this must be placed before Global error handler
//it wont take next arg, because it terminates the request and response
app.use((req, res) => {
    res.status(404).json({
        success: false,
        message: `The route ${req.originalUrl} not Found`,
    });
});
//Error Handling middleware
app.use((err, req, res, next) => {
    console.error(err.message);

    res.status(500).json({
        success: false,
        message: err.message
    });
})


//start server
const server = app.listen(PORT, () => {
    console.log(`Express server is ready! at ${server.address().port}`)
})
//server properties

